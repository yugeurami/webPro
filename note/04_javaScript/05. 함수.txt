[함수]
자바스크립트에서 함수는 하나의 자료형이지만 뒤에 ()를 여닫음으로 코드를 실행한다
이를 함수를 호출한다고 표현한다

자바스크립트는 함수를 생성할 때 지정한 매개변수보다 많거나 적은 매개변수를 사용하는 것을 허용한다
입력된 매개변수가 원래 함수에서 선언된 매개변수보다 많으면 일반적으로 추가된 매개변수는 무시하고,
적은 매개변수를 사용하면 지정하지 않은 매개변수는 undefined로 입력된다


1.익명 함수
이름이 없으므로 변수에 넣어서 사용해야한다
var functionVar = function () {}


2. 선언적 함수
이름이 부여된 함수
웹브라우저는 script 태그 내부의 내용을 읽기 전에 선언적 함수부터 읽는다
함수를 재정의 하면 기본의 함수는 없어지고 재정의한 함수를 따른다
function 함수명 () {}


3. 가변 인자 함수
매개변수의 개수가 정해지지 않고 매번 들어가는 인수의 개수가 변하는 함수
ex) Array()
arguments : 매개변수 배열

var arr1 = [273, 2, 3, 'Hello',];
var arr2 = Array(273, 2, 3, 'Hello'); // 매개변수 개수가 2개 이상일 때
var arr3 = [, , ,]; // 방 3개짜리 빈 배열
var arr4 = Array(3); // 매개변수가 1개일 경우 방 3개짜리 빈배열
var arr5 = []; //방의 개수가 0개인 배열
var arr6 = Array(); // 매개변수가 0개일 경우 : 방의 개수가 0인 배열


function arrayFun() {
      if (arguments.length == 0) {
        // 매개변수가 없을 때 할 명령어들        
      } else if (arguments.length == 1) {
        // 매개변수가 1개일 때 할 명령어들
      } else if (arguments.length >= 2) {
        // 매개변수가 2개 이상일 대 할 명령어들
      }
    }



4. 내부함수
함수 내부에 선언하는 함수
내부함수가 우선되기 때문에 함수의 충돌을 막기 위해 사용한다


<script>
function phthagoras(w, h) {
    function square(x) { // x의 제곱을 리턴하는 함수(내부함수)
        return x * x;
    }
    return Math.sqrt(square(w) + square(h));
}
</script>
<script>
function square(p, w, h) {
    if (w * w + h * h == p * p) { // 직각삼각형
        return true;
    } else {
        return false;
    }
}
</script>


5. 자기 호출 함수
다른 개발자에게 영향을 주지 않게 함수를 생성하자마자 호출 하는 경우
(fnction () { alert('자기호출함수'); })();


6. 콜백함수
매개변수에 넣어 전달된 함수
익명함수로 사용하는 경우도 많다

function callTenTimes(callback) {
    for (var cnt = 0; cnt < 10; cnt++) {
        callback();
    }
}
var funVar = function () {
    document.write(new Date() + '<br>');
};
callTenTimes(funVar); // funVar에 담긴 함수를 호출

//익명함수를 호출하는 경우
callTenTimes(function () {
    document.write(new Date() + '<br>');
});



7. 클로저 함수
내부에 선언된 함수가 외부함수의 지역변수를 사용할 경우
대부분 return을 의미하지만 항상 그런 것은 아니다
전역변수의 사용을 줄여준다



[자바스크립트 내장 함수]
1.타이머함수
타이머 함수는 모든 스크립트가 실행된 뒤에 생성된다

// 경고창 뜨는 순서 : A - C - B
alert('A');
setTimeout(function () { alert('B'); }, 0);
alert('C');

for (var i = 0; i < 3; i++) {
   setTimeout(function () { alert(i); }, 0);
   // i가 0일 때, alert(i) - 타이머1 생성
   // i가 1일 때, alert(i) - 타이머2 생성
   // i가 2일 때, alert(i) - 타이머3 생성
   // 구동! 따라서 i 값은 3으로 고정
}


(1) setTimeout(function, millisecond)
일정시간 후 함수를 한번 실행

setTimeout(function () {
    alert('3초 후에 한번 수행')
}, 3000);


(2) setInterval(function, millisecond)
일정시간마다 함수를 반복해서 실행
var id = setInterval(function () {
    document.write(Date() + "<br>");
}, 1000)


(3) clearTimeout(id)
setTimeout 중지
setTimeout은 1회 실행 후 종료함으로 잘 사용하지 않는다


(4) clearInterval(id)
setInterval 중지

var id = setInterval(function () { 
    document.write(Date() + "<br>");
}, 1000);
setTimeout(function () { 
    clearInterval(id);
    document.write('DONE');
}, 10000);


2. 인코딩디코딩
(1) 인코딩
문자를 컴퓨터에 저장하거나 통신에 사용할 목적으로 암호화(부호화)하는 방법
encodeURIComponent(uriConponent);

(2) 디코딩
암호화된 코드를 원래 형태로 되돌리는 것
decodeURIComponent(encodedURI);   


3. 숫자 확인 함수
(1) isNaN()
주어진 데이터가 NaN이면 true, NaN이 아니면 false를 return한다

(2) isFinite()
주어진 데이터가 유한하면 false, 무한하면 true를 return한다


4. 숫자 변환 함수
(1) Number()
다른 자료형을 숫자로 바꿀 때 사용한다
숫자로 바꿀 수 없는 자료를 강제로 변환시 NaN으로 출력된다

(2) parseInt(string, 진수)
문자열을 정수로 변경할 때 사용한다
문자열에 숫자와 숫자외의 값 같이 들어가면 숫자만 인식한다
Number는 진수를 인식을 못하지만 parseInt는 가능하다


5. 코드 실행 함수
문자열 형태의 코드를 실행할 수 있다
eval();
--------------------------------------------
let code = 'alert("Hello")';
eval(code);


﻿