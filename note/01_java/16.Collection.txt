[﻿Collection]
﻿배열과 유사하지만 다수의 데이터를 쉽게 처리할 수 있는 방법을 제공하는 API

﻿
<List>
순서가 있는 데이터의 집합
데이터의 중복을 허용한다.
list계열의 collection은 index로 get함
index사이를 비워둘 수 없음

1. ArrayList
ArrayList<object type> arrayList = new ArrayList<object type>();
객체형 자료만 가능하다
개체를 추가할 때마다 인덱스가 생성된다.
인덱스를 추가하거나 삭제할 때 마다 밀어내거나 당김

2.﻿LinkedList
빈번하게 삭제나 추가가 이루어질 때 사용하기도 함
객체에 다음 인덱스의 주소가 같이 저장되어 있어서 비순차적으로 순서 수정 혹은 객체 삭제 시 그 주소 값만 바꿔주면 됨
ArrayList와 사용방식은 같음

3.﻿Vector
API에서 데이터를 가져올 때 사용
속도가 느려서 데이터베이스에서 가져올 때는 사용하지 않는다


<﻿Map>
키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합
순서는 유지되지 않으며
키는 중복을 허용하지 않고 값은 중복을 허용한다
index가 없음으로 for문을 사용할 수 없고 키를 이용해서 값을 관리할 수 있다.

1. HashMap
<KeyType, object type> hashMap =  new HashMap<KeyType, object type>();
// for문 사용이 안돼서 출력 시에 사용
Iterator<KeyType> iterator = hashMap.keySet().iterator(); 


﻿<﻿Set>
순서를 유지하지 않는 데이터의 집합
데이터의 중복을 허용하지 않는다.
﻿hashcode를 기준으로 비교해서 같은 hashcode일 경우에만 중복으로 인식함

1. HashSet
﻿HashSet<String> hashSet = new HashSet<String>();

2.﻿ TreeSet
중복된 값을 체크해주고 sort해줌
순서가 존재하는 건 아님

﻿

﻿


﻿

﻿


﻿