[객체 지향 프로그램 이전]
<절차지향>
위에서 부터 순차적으로 실행
기존의 로직을 다시 사용하게 될 때 다시 코딩을 하는 방법과 기존 코드를 카피해서 재사용 하는 방식이 있으나 두 방법 모두 비효율적
=>유지보수가 어려움


[메소드(method)]
로직만 만들어 놓고 그때 그때 데이터를 주면 메소드가 알아서 결과값을 반환하는 방식
비슷한 일을 하는 메소드끼리 묶어두기
메소드만 가지고는 많은 양의 로직을 처리하기에는 한계가 있음
=>한 문서 내에 메소드의 수가 많아질 경우 추후 유지 보수 어려움

접근제한자 [static] 리턴type 메소드명([매개변수1, 매개변수2,..]){ 
//return이 없을 경우 리턴type은 void
처리할 프로세스들
return 리턴값; // return이 나오면 호출한 곳으로 값을 출력, 밑으로는 실행X
}

<접근제한자>
public : 다른 클래스에서도 불러올 수 있음
private : 이 클래스 안에서만 사용가능

<함수의 오버로딩>
같은 이름으로 매개변수가 다른 함수 생성
매개변수로 함수를 구분

<재귀적 함수 호출>
자기 자신을 호출